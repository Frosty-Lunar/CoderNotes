import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,d as a,e as s,b as e,f as t}from"./app-5f4e7946.js";const l="/CoderNotes/assets/image-20230829221145903-dd91b0d8.png",p="/CoderNotes/assets/image-20230829221343565-a18bcc33.png",d="/CoderNotes/assets/image-20230829221513641-540a5510.png",u="/CoderNotes/assets/image-20230829221618192-8f04a0a8.png",b="/CoderNotes/assets/image-20230829221733234-0577a288.png",m="/CoderNotes/assets/image-20230829221828701-891ef640.png",g="/CoderNotes/assets/image-20230829223026249-2dbc2e06.png",v="/CoderNotes/assets/image-20230829223042138-1bf50286.png",k="/CoderNotes/assets/image-20230829223231943-ab1e79d5.png",h="/CoderNotes/assets/image-20230829223924927-03db5295.png",f="/CoderNotes/assets/image-20230829224052773-ece773a1.png",y="/CoderNotes/assets/image-20230829231701180-76b1887b.png",_="/CoderNotes/assets/image-20230829232900031-4b0b809f.png",x="/CoderNotes/assets/image-20230829233253510-f19428ec.png",C="/CoderNotes/assets/image-20230830124818394-7e944362.png",N="/CoderNotes/assets/image-20230830125040895-60c97027.png",H="/CoderNotes/assets/image-20230830125138388-7fe38a4d.png",z="/CoderNotes/assets/image-20230830125148693-cc3ac756.png",A="/CoderNotes/assets/image-20230830125205248-8d96f1cb.png",S="/CoderNotes/assets/image-20230830125950796-43b4b1ec.png",T="/CoderNotes/assets/image-20230830130028760-ecf5e02f.png",D="/CoderNotes/assets/image-20230830130103735-41d5ffde.png",P="/CoderNotes/assets/image-20230830130327478-17ab575f.png",j={},w=t('<h2 id="harbor" tabindex="-1"><a class="header-anchor" href="#harbor" aria-hidden="true">#</a> Harbor</h2><p>镜像私服仓库</p><h3 id="dockerhub" tabindex="-1"><a class="header-anchor" href="#dockerhub" aria-hidden="true">#</a> DockerHub</h3><p>官网地址：<code>hub.docker.com</code></p><ol><li>在docker机器上登录：<code>docker login</code>，然后输入用户名密码进行登录</li></ol><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>登录成功后，就可以推送镜像到docker仓库：<code>docker push wang186017/myapp:latest</code></li></ol><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：此处推送的镜像命名需要符合规则，例如需要用户名开头，如果不是则会出现如下错误：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果出现以上错误，我们可以使用<code>docker tag [镜像名]</code>对镜像进行重命名。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之后重新推送即可。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>其他人想要下载此镜像，只需要运行如下命令：<code>docker pull wang186017/myapp</code></li></ol><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="阿里云docker-registry" tabindex="-1"><a class="header-anchor" href="#阿里云docker-registry" aria-hidden="true">#</a> 阿里云Docker Registry</h3><p>仓库地址：<code>https://cr.console.aliyun.com/cn-hangzhou/instance/repositories</code></p><p>登录阿里云，进入到镜像服务，创建命名空间</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建镜像仓库</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将镜像推送到阿里云镜像仓库</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="私服harbor" tabindex="-1"><a class="header-anchor" href="#私服harbor" aria-hidden="true">#</a> 私服Harbor</h3><h4 id="harbor简介" tabindex="-1"><a class="header-anchor" href="#harbor简介" aria-hidden="true">#</a> Harbor简介</h4><p>Docker容器应用的开发和运行离不开可靠的镜像管理，虽然Docker官方也提供了公共的镜像仓库，但是从安全和效率等方面考虑，部署我们私有环境内的Registry也是非常必要的。Harbor是由VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。</p><h4 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h4><table><thead><tr><th><strong>组件</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>harbor-adminserver</td><td>配置管理中心</td></tr><tr><td>harbor-db</td><td>MySQL数据库</td></tr><tr><td>harbor-jobservice</td><td>负责镜像复制</td></tr><tr><td>harbor-log</td><td>记录操作日志</td></tr><tr><td>harbor-ui</td><td>Web管理页面和API</td></tr><tr><td>nginx</td><td>前端代理，负责前端页面和镜像上传/下载转发</td></tr><tr><td>redis</td><td>会话</td></tr><tr><td>registry</td><td>镜像存储</td></tr></tbody></table><h4 id="habor安装" tabindex="-1"><a class="header-anchor" href="#habor安装" aria-hidden="true">#</a> Habor安装</h4><p>官网安装教程：<code>https://goharbor.io/docs/2.3.0/install-config/</code></p><p>首先需要下载对应的安装文件：<code>https://github.com/goharbor/harbor/releases</code></p><ol><li>使用在线方式下载：<code>wget https://github.com/goharbor/harbor/releases/download/v2.8.3/harbor-online-installer-v2.8.3.tgz</code></li></ol><figure><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>解压压缩包，修改配置文件：<code>tar -zxvf harbor-online-installer-v2.8.3.tgz</code><br> 把 harbor.yml.tmpl 修改为 harbor.yml 文件：<code>cp harbor.yml.tmpl harbor.yml</code></li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hostname</span><span class="token punctuation">:</span> 192.168.232.188

<span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>

<span class="token key atrule">https</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>
  <span class="token key atrule">certificate</span><span class="token punctuation">:</span> /data/cert/192.168.232.188.crt
  <span class="token key atrule">private_key</span><span class="token punctuation">:</span> /data/cert/192.168.232.188.key

<span class="token key atrule">harbor_admin_password</span><span class="token punctuation">:</span> Harbor12345

<span class="token key atrule">database</span><span class="token punctuation">:</span>
  <span class="token key atrule">password</span><span class="token punctuation">:</span> root123
  <span class="token key atrule">max_idle_conns</span><span class="token punctuation">:</span> <span class="token number">100</span>
  <span class="token key atrule">max_open_conns</span><span class="token punctuation">:</span> <span class="token number">900</span>
  <span class="token key atrule">conn_max_idle_time</span><span class="token punctuation">:</span> <span class="token number">0</span>
  
<span class="token key atrule">data_volume</span><span class="token punctuation">:</span> /data/harbor

<span class="token key atrule">trivy</span><span class="token punctuation">:</span>
  <span class="token key atrule">ignore_unfixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token key atrule">skip_update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token key atrule">offline_scan</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

  <span class="token key atrule">security_check</span><span class="token punctuation">:</span> vuln

  <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

<span class="token key atrule">jobservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">max_job_workers</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">logger_sweeper_duration</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment">#days</span>

<span class="token key atrule">notification</span><span class="token punctuation">:</span>
  <span class="token key atrule">webhook_job_max_retry</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">webhook_job_http_client_timeout</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment">#seconds</span>

<span class="token comment"># Log configurations</span>
<span class="token key atrule">log</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span> info
  <span class="token key atrule">local</span><span class="token punctuation">:</span>
    <span class="token key atrule">rotate_count</span><span class="token punctuation">:</span> <span class="token number">50</span>
    <span class="token key atrule">rotate_size</span><span class="token punctuation">:</span> 200M
    <span class="token key atrule">location</span><span class="token punctuation">:</span> /data/harbor/logs

<span class="token key atrule">_version</span><span class="token punctuation">:</span> 2.8.0

<span class="token key atrule">proxy</span><span class="token punctuation">:</span>
  <span class="token key atrule">http_proxy</span><span class="token punctuation">:</span>
  <span class="token key atrule">https_proxy</span><span class="token punctuation">:</span>
  <span class="token key atrule">no_proxy</span><span class="token punctuation">:</span>
  <span class="token key atrule">components</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> core
    <span class="token punctuation">-</span> jobservice
    <span class="token punctuation">-</span> trivy

<span class="token key atrule">upload_purging</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">age</span><span class="token punctuation">:</span> 168h
  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 24h
  <span class="token key atrule">dryrun</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cache</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">expire_hours</span><span class="token punctuation">:</span> <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>harbor配置 https 访问</li></ol><p>参考文档：</p>',41),E={href:"https://goharbor.io/docs/1.10/install-config/configure-https/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://goharbor.io/docs/1.10/install-config/troubleshoot-installation/#https",target:"_blank",rel:"noopener noreferrer"},I=t('<p>默认情况下，Harbor不附带证书。可以在没有安全性的情况下部署Harbor，以便您可以通过HTTP连接到它。但是，只有在没有外部网络连接的空白测试或开发环境中，才可以使用HTTP。在没有空隙的环境中使用HTTP会使您遭受中间人攻击。在生产环境中，请始终使用HTTPS。如果启用Content Trust with Notary来正确签名所有图像，则必须使用HTTPS。<br> 要配置HTTPS，必须创建SSL证书。您可以使用由受信任的第三方CA签名的证书，也可以使用自签名证书。</p><p><strong>生成证书颁发机构证书</strong></p><p>在生产环境中，您应该从CA获得证书。在测试或开发环境中，您可以生成自己的CA。要生成CA证书，请运行以下命令。</p><p><strong>生成CA证书私钥</strong>：<code>openssl genrsa -out ca.key 4096</code></p><figure><img src="'+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>生成CA证书</strong></p><p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为通用名称（<code>CN</code>）属性。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-sha512</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.232.188&quot;</span> <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-out</span> ca.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><p><strong>生成服务器证书</strong></p><p>证书通常包含一个<code>.crt</code>文件和一个<code>.key</code>文件</p><p><strong>生成私钥</strong></p><p><code>openssl genrsa -out 192.168.232.188.key 4096</code></p><p><strong>生成证书签名请求（CSR）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-sha512</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.232.188&quot;</span> <span class="token parameter variable">-key</span> <span class="token number">192.168</span>.232.188.key <span class="token parameter variable">-out</span> <span class="token number">192.168</span>.232.188.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><p><strong>生成一个x509 v3扩展文件</strong></p><p>无论您使用FQDN还是IP地址连接到Harbor主机，都必须创建此文件，以便可以为您的Harbor主机生成符合主题备用名称（SAN）和x509 v3的证书扩展要求。替换<code>DNS</code>条目以反映您的域</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> v3.ext <span class="token operator">&lt;&lt;-</span><span class="token string">EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1=harbor.od.com
DNS.2=harbor.od.com
DNS.3=harbor.od.com
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果您是IP访问</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> v3.ext <span class="token operator">&lt;&lt;-</span>EOF
<span class="token assign-left variable">authorityKeyIdentifier</span><span class="token operator">=</span>keyid,issuer
<span class="token assign-left variable">basicConstraints</span><span class="token operator">=</span>CA:FALSE
keyUsage <span class="token operator">=</span> digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage <span class="token operator">=</span> serverAuth
subjectAltName <span class="token operator">=</span> IP:192.168.232.188
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>粘贴完成后，输入<code>EOF</code>结束输入。</p><p><strong>使用该v3.ext文件为您的Harbor主机生成证书</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-sha512</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-extfile</span> v3.ext <span class="token punctuation">\\</span>
    <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-in</span> <span class="token number">192.168</span>.232.188.csr <span class="token punctuation">\\</span>
    <span class="token parameter variable">-out</span> <span class="token number">192.168</span>.232.188.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><p><strong>提供证书给Harbor和Docker</strong></p><p>生成后<code>ca.crt</code>，<code>harbor.od.com.crt</code>和<code>harbor.od.com.key</code>文件，必须将它们提供给<code>Harbor</code>和<code>docker</code>，重新配置它们</p><p>将服务器证书和密钥复制到Harbor主机上的<code>/data/cert/</code>文件夹中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/cert/
<span class="token function">cp</span> harbor.od.com.crt /data/cert/
<span class="token function">cp</span> harbor.od.com.key /data/cert/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换<code>harbor.od.com.crt</code>为<code>harbor.od.com.cert</code>，供Docker使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-inform</span> PEM <span class="token parameter variable">-in</span> harbor.od.com.crt <span class="token parameter variable">-out</span> harbor.od.com.cert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker/certs.d/harbor.od.com/
<span class="token function">cp</span> harbor.od.com.cert /etc/docker/certs.d/harbor.od.com/
<span class="token function">cp</span> harbor.od.com.key /etc/docker/certs.d/harbor.od.com/
<span class="token function">cp</span> ca.crt /etc/docker/certs.d/harbor.od.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将默认<code>nginx</code>端口443映射到其他端口，请创建文件夹<code>/etc/docker/certs.d/yourdomain.com:port</code>或<code>/etc/docker/certs.d/harbor_IP:port</code></p><p>重新启动Docker Engine：<code>systemctl restart docker</code></p><p>证书目录结构</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>/etc/docker/certs.d/
└── harbor.od.com
    ├── ca.crt
    ├── harbor.od.com.cert
    └── harbor.od.com.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Harbor将<code>nginx</code>实例用作所有服务的反向代理。您可以使用<code>prepare</code>脚本来配置<code>nginx</code>为使用HTTPS</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> install.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>连接验证</p><p>默认用户名：<code>admin</code><br> 默认密码：<code>Harbor12345</code></p><figure><img src="`+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>停止并删除服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose down <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Docker登录</p><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="harbor部署应用" tabindex="-1"><a class="header-anchor" href="#harbor部署应用" aria-hidden="true">#</a> Harbor部署应用</h4><p>上传镜像到Harbor服务中</p><p>在Web服务中创建项目和用户</p><figure><img src="'+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后项目分配用户</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>拉取命令：<code>docker pull 192.168.232.188/frostylunar/myapp@sha256:c92fb05f56d3b72e6a58d867ffe2bcdb680bab411cd210282a69f8153e762875</code></p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',62);function B(F,O){const n=o("ExternalLinkIcon");return r(),c("div",null,[w,a("p",null,[a("a",E,[s("https://goharbor.io/docs/1.10/install-config/configure-https/"),e(n)])]),a("p",null,[a("a",L,[s("https://goharbor.io/docs/1.10/install-config/troubleshoot-installation/#https"),e(n)])]),I])}const U=i(j,[["render",B],["__file","Harbor.html.vue"]]);export{U as default};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as s,d as e,e as i,b as c,f as r}from"./app-5f4e7946.js";const d="/CoderNotes/assets/image-20230825201104604-fe9d6b1b.png",g="/CoderNotes/assets/image-20230825201152191-fbb24351.png",p="/CoderNotes/assets/image-20230825201253115-61c40d47.png",l="/CoderNotes/assets/image-20230825202136296-276ea4cb.png",m="/CoderNotes/assets/image-20230825205733400-0a025d5a.png",f="/CoderNotes/assets/image-20230825205901767-43533342.png",u="/CoderNotes/assets/image-20230825233214480-40c206cb.png",b="/CoderNotes/assets/image-20230825233502149-1d2c796a.png",h="/CoderNotes/assets/image-20230825233643435-7d9f5874.png",_="/CoderNotes/assets/image-20230826130046870-35f6aa6b.png",k="/CoderNotes/assets/image-20230826130206438-2750b087.png",x="/CoderNotes/assets/image-20230826130949135-33c9e677.png",N="/CoderNotes/assets/image-20230826131631844-a222fec1.png",C="/CoderNotes/assets/image-20230826131745246-7bd69cdf.png",y="/CoderNotes/assets/image-20230826133726226-bdb3d3df.png",z="/CoderNotes/assets/image-20230826133932031-e5b43c4e.png",P="/CoderNotes/assets/image-20230826134016448-46f8af12.png",v="/CoderNotes/assets/image-20230828090915354-ab4afee5.png",I="/CoderNotes/assets/image-20230828091259822-9ed5ebdf.png",w="/CoderNotes/assets/image-20230828092005631-e9da0583.png",D="/CoderNotes/assets/image-20230828092430102-6d6aad96.png",L="/CoderNotes/assets/image-20230828092920904-0460910e.png",U="/CoderNotes/assets/image-20230828093218670-7fe28255.png",T="/CoderNotes/assets/image-20230828093444949-cf4058b8.png",E="/CoderNotes/assets/image-20230828093657611-3e2c9b69.png",O="/CoderNotes/assets/image-20230828100951979-9290e0bd.png",S="/CoderNotes/assets/image-20230828102022925-010454e1.png",W="/CoderNotes/assets/image-20230828103828989-c328b9f2.png",A="/CoderNotes/assets/image-20230828104001146-9f9a7fe6.png",q="/CoderNotes/assets/image-20230828104042524-0c9f414b.png",B="/CoderNotes/assets/image-20230828105553293-081bb5f9.png",V="/CoderNotes/assets/image-20230828110430794-c8677b37.png",M="/CoderNotes/assets/image-20230828110817577-04bc1796.png",R="/CoderNotes/assets/image-20230828110909663-7462ffc5.png",F="/CoderNotes/assets/image-20230828111019336-db05966d.png",G="/CoderNotes/assets/image-20230828111615397-3bad30a6.png",H="/CoderNotes/assets/image-20230828112853909-88c6f253.png",K="/CoderNotes/assets/image-20230828112951393-e2bf4675.png",X="/CoderNotes/assets/image-20230828113110692-e6d35117.png",j="/CoderNotes/assets/image-20230828113230326-c68dfe6f.png",J="/CoderNotes/assets/image-20230828113600110-690828d0.png",Q="/CoderNotes/assets/image-20230828114007868-1b7f87bd.png",Y="/CoderNotes/assets/image-20230828114047830-7d910a6c.png",Z="/CoderNotes/assets/image-20230828114516677-df3b762e.png",$="/CoderNotes/assets/image-20230828115005610-35f65eb0.png",ee="/CoderNotes/assets/image-20230828115708858-76abfcdb.png",ie="/CoderNotes/assets/image-20230828134407152-5572a1be.png",oe="/CoderNotes/assets/image-20230828134852879-cf701f15.png",ae="/CoderNotes/assets/image-20230828135345901-008053a7.png",te="/CoderNotes/assets/image-20230828135503909-767aca6f.png",ne="/CoderNotes/assets/image-20230828135618201-f12d8873.png",se="/CoderNotes/assets/image-20230828140236892-edec1451.png",ce="/CoderNotes/assets/image-20230828140614141-a9e32bc6.png",re="/CoderNotes/assets/image-20230828141449386-e2fdbdf3.png",de="/CoderNotes/assets/image-20230828141802088-7d78cf73.png",ge="/CoderNotes/assets/image-20230828142258786-2c971e1c.png",pe="/CoderNotes/assets/image-20230828142312662-2e472f20.png",le="/CoderNotes/assets/image-20230828142425316-93f21009.png",me="/CoderNotes/assets/image-20230828142759317-7dae6fc0.png",fe={},ue=e("h2",{id:"docker网络介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker网络介绍","aria-hidden":"true"},"#"),i(" Docker网络介绍")],-1),be=e("p",null,"Docker是基于Linux Kernel的namespace，CGroups，UnionFileSystem等技术封装成的一种自定义容器格式，从而提供了一套虚拟运行环境。",-1),he=e("blockquote",null,[e("p",null,[i("namespace：用来做隔离的，比如 pid[进程]、net【网络】、mnt【挂载点】"),e("br"),i(" CGroups：Controller Groups 用来做资源限制，比如内存和CPU等"),e("br"),i(" Union File Systems：用来做Image和Container分层")])],-1),_e=e("h3",{id:"计算机网络模型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#计算机网络模型","aria-hidden":"true"},"#"),i(" 计算机网络模型")],-1),ke={href:"https://docs.docker.com/network/",target:"_blank",rel:"noopener noreferrer"},xe=r('<p><strong>OSI</strong>：开放系统互联参考模型(Open System Interconnect)<br><strong>TCP/IP</strong>：传输控制协议/网际协议(Transmission Control/Internet Protocol)，是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p><p>分层思想：分层的基本想法是每一层都在它的下层提供的服务基础上提供更高级的增值服务，而最高层提供能运行分布式应用程序的服务。<br><img src="'+d+'" alt="" loading="lazy"></p><p>客户端发送请求：<br><img src="'+g+'" alt="" loading="lazy"></p><p>服务端接收请求：<br><img src="'+p+'" alt="" loading="lazy"></p><h3 id="linux中的网卡" tabindex="-1"><a class="header-anchor" href="#linux中的网卡" aria-hidden="true">#</a> Linux中的网卡</h3><h4 id="查看网卡信息" tabindex="-1"><a class="header-anchor" href="#查看网卡信息" aria-hidden="true">#</a> 查看网卡信息</h4><p>查看网卡的命令：<code>ip a</code><br><img src="'+l+'" alt="" loading="lazy"></p><p>通过<code>ip a</code>命令可以看到当前的centos中有三个网卡信息，作用分别是：</p><ol><li><code>lo</code> (Loopback): <ul><li>类型：环回接口，用于本地回环测试。</li><li>状态：UP（已启用），LOWER_UP（链路已连接）。</li><li>IPv4地址：127.0.0.1/8，表示本地主机。</li><li>IPv6地址：::1/128，表示本地主机的IPv6地址。</li></ul></li><li><code>ens33</code>: <ul><li>类型：以太网接口，可能是物理网卡或虚拟网卡。</li><li>状态：UP（已启用），LOWER_UP（链路已连接）。</li><li>MAC地址：00:0c:29:8e:8d:90。</li><li>IPv4地址：192.168.232.188/24，子网掩码为255.255.255.0。</li><li>广播地址：192.168.232.255，表示在这个子网内广播。</li><li>IPv6地址：fe80::421b:125e:c924:9afe/64，链路本地IPv6地址。</li></ul></li><li><code>docker0</code>: <ul><li>类型：Docker桥接接口，用于Docker容器的通信。</li><li>状态：UP（已启用）。</li><li>MAC地址：02:42:f3:fe:38:ea。</li><li>IPv4地址：172.17.0.1/16，表示Docker桥接网络的网关地址。</li><li>IPv6地址：fe80::42:f3ff:fefe:38ea/64，链路本地IPv6地址。</li></ul></li><li><code>veth4ef30a0@if28</code>: <ul><li>类型：虚拟以太网接口（veth），与Docker桥接接口<code>docker0</code>相连。</li><li>状态：UP（已启用），LOWER_UP（链路已连接）。</li><li>MAC地址：4a:5d:cf:ac:7a:d7。</li><li>IPv6地址：fe80::485d:cfff:feac:7ad7/64，链路本地IPv6地址。</li></ul></li><li><code>vethf9e2b80@if56</code>: <ul><li>类型：虚拟以太网接口（veth），与Docker桥接接口<code>docker0</code>相连。</li><li>状态：UP（已启用），LOWER_UP（链路已连接）。</li><li>MAC地址：2e:78:6c:65:02:b1。</li><li>IPv6地址：fe80::2c78:6cff:fe65:2b1/64，链路本地IPv6地址。</li></ul></li></ol><p>通过<code>ip link show</code>命令查看：<br><img src="'+m+'" alt="" loading="lazy"></p><p>以文件的形式查看网卡：<code>ls /sys/class/net</code><br><img src="'+f+'" alt="" loading="lazy"></p><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h4><p>在Linux中网卡其实就是文件，所以找到对应的网卡文件即可，存放的路径：<code>/etc/sysconfig/network-scripts/</code><br><img src="'+u+'" alt="" loading="lazy"></p><h4 id="网卡操作" tabindex="-1"><a class="header-anchor" href="#网卡操作" aria-hidden="true">#</a> 网卡操作</h4><p>网卡中增加IP地址：<code>ip addr add 192.168.232.189/24 dev ifcfg-ens33</code><br><img src="'+b+'" alt="" loading="lazy"></p><p>删除IP地址: <code>ip addr delete 192.168.100.120/24 dev ens33</code><br><img src="'+h+'" alt="" loading="lazy"></p><h4 id="网卡信息解析" tabindex="-1"><a class="header-anchor" href="#网卡信息解析" aria-hidden="true">#</a> 网卡信息解析</h4><ul><li>状态：UP/DOWN/UNKOWN等</li><li>link/ether：MAC地址</li><li>inet：绑定的IP地址</li></ul><h3 id="network-namespace" tabindex="-1"><a class="header-anchor" href="#network-namespace" aria-hidden="true">#</a> Network Namespace</h3><p>Network Namespace 是实现网络虚拟化的重要功能，它能创建多个隔离的网络空间，它们有独自的网络栈信息。不管是虚拟机还是容器，运行的时候仿佛自己就在独立的网络中。</p><h4 id="network-namespce-实战" tabindex="-1"><a class="header-anchor" href="#network-namespce-实战" aria-hidden="true">#</a> Network Namespce 实战</h4><p>添加一个<code>namespace</code>：<code>ip netns add ns1</code><br> 查看当前具有的<code>namespace</code>：<code>ip netns list</code><br> 删除<code>namespace</code>：<code>ip netns delete ns1</code><br><img src="'+_+'" alt="" loading="lazy"></p><p>查看namespace[ns1]的网卡情况：<code>ip netns exec ns1 ip a</code></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>启动网络状态：<code>ip netns exec ns1 ifup lo</code></p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关闭网络状态：<code>ip netns exec ns1 ifdown lo</code></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还可以通过link来设置状态：<code>ip netns exec ns1 ip link set lo up</code></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再次添加一个<code>namespace[ns2]</code>：<code>ip netns add ns2</code></p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实现两个<code>namespace</code>的通信</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>要实现两个<code>network namespace</code>的通信，我们需要实现到的技术是：<br><code>veth pair</code>：Virtual Ethernet Pair，是一个成对的端口，可以实现上述功能。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建一对<code>link</code>，也就是接下来要通过veth pair连接的link：<code>ip link add veth-ns1 type veth peer name veth-ns2</code><br> 连接完成后，宿主机中会多出一对网卡，如下所示：<br><img src="'+I+'" alt="" loading="lazy"></p><p>然后将创建好的 <code>veth-ns1</code>交给<code>namespace1</code>，把<code>veth-ns2</code>交给<code>namespace2</code></p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由上图可知，将网卡分配给两个虚拟空间后，网卡就不在宿主机中了。<br> 再查看<code>ns1</code>和<code>ns2</code>中的link情况：<br><img src="'+D+`" alt="" loading="lazy"></p><p>此时网卡分别存在于两个虚拟空间中，但是仔细观察发现两个网卡还没有IP地址，显然如果缺少IP地址，两虚拟空间直接无法进行直接通信。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.0.11/24 dev veth-ns1
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.0.12/24 dev veth-ns2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再次查看，发现<code>state</code>是DOWN。所以我们需要启用对应的网卡：<br><img src="'+U+'" alt="" loading="lazy"></p><p>然后就可以进行测试，查看两个虚拟空间之间是否可以连通。</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="container的namespace" tabindex="-1"><a class="header-anchor" href="#container的namespace" aria-hidden="true">#</a> Container的NameSpace</h4><p>按照上面的描述，实际上每个container，都会有自己的<code>network namespace</code>，并且是独立的，我们可以进入到容器中进行验证。</p><p>容器启动后，如果没有网卡驱动，那么我们需要在打包镜像的时候，在Dockerfile文件中运行<code>RUN yum -y install initscripts</code>命令。</p><blockquote><p>注意：<code>initscripts</code> 是一个软件包，它包含了在许多 Linux 系统上用于启动和停止系统服务的初始化脚本和相关工具。在 Linux 中，系统服务（也称为守护进程）是在操作系统启动时自动启动的后台进程，它们可以执行各种任务，例如网络服务、日志记录、定时任务等。</p></blockquote><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试两个容器的网络连接：<code>docker exec -it tomcat01 ping 172.17.0.4</code></p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>问题：此时tomcat01和tomcat02属于两个network namespace，是如何能够ping通的？ 注意这里没有veth-pair技术。</p></blockquote><h3 id="深入分析container网络-bridge" tabindex="-1"><a class="header-anchor" href="#深入分析container网络-bridge" aria-hidden="true">#</a> 深入分析Container网络-Bridge</h3><h4 id="docker默认bridge" tabindex="-1"><a class="header-anchor" href="#docker默认bridge" aria-hidden="true">#</a> Docker默认Bridge</h4><p>首先我们通过<code>ip a</code>可以查看当前宿主机的网络情况<br><img src="'+W+'" alt="" loading="lazy"></p><p>然后查看 <code>tomcat01</code>中的网络： <code>docker exec -it tomcat01 ip a</code>可以查看网络IP地址。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试宿主机与容器的连通性：</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>既然可以ping通，而且centos和tomcat01又属于两个不同的NetWork NameSpace，他们是怎么连接的？看图</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实在tomcat01中有一个eth0和centos的docker0中有一个veth是成对的，类似于之前实战中的veth-ns1和veth-ns2，要确认也很简单。<br> 执行命令<code>yum install bridge-utils</code>安装<code>bridge-utils</code>工具。</p><blockquote><p><code>bridge-utils</code> 是一个 Linux 系统上的实用工具集，用于配置和管理网络桥接（bridging）。网络桥接是一种将多个网络接口连接在一起以工作在同一个网络段的技术。它可以用于多种用途，包括以下几点：</p><ol><li><strong>虚拟化环境中的网络管理：</strong> 在虚拟化环境中，网络桥接用于连接虚拟机和宿主机的物理网络，从而实现虚拟机与外部网络的通信。</li><li><strong>网络流量监控和分析：</strong> 通过将多个网络接口桥接到一个网络桥上，可以在桥接上捕获和分析网络流量，以便进行网络监控和故障排除。</li><li><strong>虚拟网络实验：</strong> 桥接可以用于创建虚拟网络实验环境，其中多台计算机可以直接连接在一起，形成一个独立的虚拟网络。</li><li><strong>容器网络：</strong> 在容器技术中，网络桥接可以用来连接多个容器，使它们能够互相通信和与外部网络通信。</li><li><strong>连接不同物理网络：</strong> 如果你有多个物理网络，你可以使用网络桥接来连接它们，使得这些网络上的设备能够互相通信。<br> 在安装了 <code>bridge-utils</code> 工具集之后，你可以使用其中的命令来创建、配置和管理网络桥接。例如，你可以使用 <code>brctl</code> 命令来创建和删除桥接，添加和删除网络接口到桥接上，以及查看当前的网络桥接设置等。<br> 请注意，随着时间的推移，Linux 网络技术和工具可能会有所变化，因此你可能需要查阅当前系统版本的文档来获取最新的信息和使用方法。</li></ol></blockquote><p>执行<code>brctl show</code>命令：</p><figure><img src="'+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种网络连接方法我们称之为<code>Bridge</code>，其实也可以通过命令查看docker中的网络模式：<code>docker network ls</code> , bridge也是docker中默认的网络模式。</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不妨检查一下bridge：<code>docker network inspect bridge</code></p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>tomcat01</code>容器中是可以访问互联网的，顺便把这张图画一下咯，NAT是通过iptables实现的。</p><figure><img src="'+G+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="自定义network" tabindex="-1"><a class="header-anchor" href="#自定义network" aria-hidden="true">#</a> 自定义NetWork</h4><p>创建一个<code>network</code>，类型为 <code>Bridge</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create tomcat-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+K+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看<code>tomcat-net</code>详情信息：<code>docker network inspect tomcat-net</code></p><figure><img src="'+X+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>删除<code>network</code>：<code>docker network rm tomcat-net</code></p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建tomcat容器，并指定使用<code>tomcat-net</code>：<code>docker run -d --name custom-net-tomcat --network tomcat-net frostylunar/tomcat-ip:1.0</code></p><figure><img src="'+J+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看<code>custom-net-tomcat</code>的网络信息：截取了关键信息</p><figure><img src="'+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看网卡接口信息：<code>brctl show</code></p><figure><img src="'+Y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时在<code>custom-net-tomcat</code>容器中ping <code>tomcat01</code>发现是ping不通的：因为两个容器不在同一网卡上且不在同一网段上。</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时如果<code>tomcat01</code>容器能够连接上<code>tomcat-net</code>上应该就可以了。</p><figure><img src="'+$+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时发现tomcat01可以连接上custom-net-tomcat，因为此时tomcat01连接着网卡tomcat-net。但是反向ping是不通的，如果要实现双向连接，需要将custome-net-tomcat连接上默认网卡。</p><figure><img src="'+ee+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="深入分析-container网络-host-none" tabindex="-1"><a class="header-anchor" href="#深入分析-container网络-host-none" aria-hidden="true">#</a> 深入分析 Container网络-Host&amp;None</h3><h4 id="host" tabindex="-1"><a class="header-anchor" href="#host" aria-hidden="true">#</a> Host</h4><p>Host模式下，容器将共享主机的网络堆栈，并且主机的所有接口都可供容器使用。容器的主机名将与主机系统上的主机名匹配。</p><p>创建一个容器，并指定网络为host：<code>docker run -d --name my-tomcat-host --network host frostylunar/tomcat-ip:1.0</code><br> 查看IP地址：<code>docker exec -it my-tomcat-host ip a</code></p><figure><img src="'+ie+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>检查host网络：<code>docker inspect host</code></p><figure><img src="'+oe+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="none" tabindex="-1"><a class="header-anchor" href="#none" aria-hidden="true">#</a> None</h4><p>None模式不会为容器配置任何IP，也不能访问外部网络以及其他容器。它具有环回地址，可用于运行批处理作业。<br> 创建一个tomcat容器，并指定网络为none：<code>docker run -d --name my-tomcat-none --network none frostylunar/tomcat-ip:1.0</code></p><figure><img src="'+ae+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看IP地址：<code>docker exec -it my-tomcat-none ip a</code></p><figure><img src="'+te+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看none网络：<code>docker network inspect none</code></p><figure><img src="'+ne+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="端口映射" tabindex="-1"><a class="header-anchor" href="#端口映射" aria-hidden="true">#</a> 端口映射</h3><p>创建一个tomcat容器，名称为<code>port-tomcat</code>：<code>docker run -d --name port-tomcat frostylunar/tomcat-ip:1.0</code></p><figure><img src="'+se+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么如何访问tomcat项目呢，我们并没有配置端口映射。<br> 首先我们进入容器内部：<code>docker exec -it port-tomcat bash</code><br> 然后发起请求：<code>curl localhost:8080</code><br> 如下图所示，我们可以拿到Tomcat默认首页。</p><figure><img src="'+ce+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这是在容器内部发起请求，那如果是在容器外呢？<br> 如果是在容器外，那连接会被拒绝，因为容器是完全隔离的环境，如果想访问容器内部则需要做端口映射。</p><figure><img src="'+re+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在centos 7中访问该容器内页面，只需要通过<code>localhost:8090</code>即可。8090为网卡上的接口映射到容器内的8080端口。</p><figure><img src="'+de+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在windows中访问该容器内页面，需要通过<code>192.168.232.188:8090</code>即可。<strong>注意：此时需要centos和win网络在同一个网段</strong></p><figure><img src="'+ge+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+pe+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="多机之间通信" tabindex="-1"><a class="header-anchor" href="#多机之间通信" aria-hidden="true">#</a> 多机之间通信</h3><p>具体深入介绍会在 Docker Swarm 中详聊，本节简单介绍。<br> 在同一台centos7机器上，发现无论怎么折腾，我们一定有办法让两个container通信。 那如果是在两台centos7机器上呢？</p><figure><img src="'+le+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>VXLAN技术实现：Virtual Extensible LAN(虚拟可扩展局域网)</p><figure><img src="'+me+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',128);function Ne(Ce,ye){const o=t("ExternalLinkIcon");return n(),s("div",null,[ue,be,he,_e,e("p",null,[e("a",ke,[i("Docker网络官网"),c(o)]),i("。")]),xe])}const ve=a(fe,[["render",Ne],["__file","Docker网络介绍.html.vue"]]);export{ve as default};

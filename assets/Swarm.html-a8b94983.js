import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c,d as a,e,b as n,f as o}from"./app-5f4e7946.js";const l="/CoderNotes/assets/image-20230830220806670-71dee31b.png",p="/CoderNotes/assets/image-20230830221230707-01adcae5.png",d="/CoderNotes/assets/image-20230830221518194-77db70ed.png",u="/CoderNotes/assets/image-20230830224457612-b6ce1db4.png",m="/CoderNotes/assets/image-20230830224526725-7e97623b.png",g="/CoderNotes/assets/image-20230830224539910-3826f95b.png",v="/CoderNotes/assets/image-20230830224659554-35e04042.png",k="/CoderNotes/assets/image-20230830224715924-87ce4c54.png",b="/CoderNotes/assets/image-20230830224730591-eb4666f7.png",h="/CoderNotes/assets/image-20230830224746245-3a14b11c.png",f="/CoderNotes/assets/image-20230830225033293-fcdb0e05.png",_="/CoderNotes/assets/image-20230830225741070-4554c4ca.png",w="/CoderNotes/assets/image-20230830230006170-a213c169.png",x="/CoderNotes/assets/image-20230830230050062-de144855.png",y={},S=a("h2",{id:"swarm",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#swarm","aria-hidden":"true"},"#"),e(" Swarm")],-1),R=a("p",null,"解决集群问题 k8s",-1),N={href:"https://docs.docker.com/engine/swarm/",target:"_blank",rel:"noopener noreferrer"},D=o('<h3 id="swarm-介绍" tabindex="-1"><a class="header-anchor" href="#swarm-介绍" aria-hidden="true">#</a> Swarm 介绍</h3><p>Swarm是Docker官方提供的一款集群管理工具，其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。Swarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="管理节点" tabindex="-1"><a class="header-anchor" href="#管理节点" aria-hidden="true">#</a> 管理节点</h4><p>管理节点处理集群管理任务：</p>',5),E=a("li",null,"维护集群状态",-1),T=a("li",null,"调度服务",-1),A={href:"https://docs.docker.com/engine/api/",target:"_blank",rel:"noopener noreferrer"},z=o('<p>使用<code>Raft</code>实现，管理器维护整个 swarm 及其上运行的所有服务的一致内部状态。出于测试目的，可以使用单个管理器运行 swarm。如果单管理器群中的管理器出现故障，您的服务会继续运行，但您需要创建一个新集群来恢复。</p><p>为了利用 swarm 模式的容错特性，Docker 建议您根据组织的高可用性要求实现奇数个节点。当您有多个管理器时，您可以在不停机的情况下从管理器节点的故障中恢复。</p><ul><li>三个管理器的群体最多可以容忍一个管理器的损失。</li><li>一个五管理器群可以容忍最大同时丢失两个管理器节点。</li><li>一个<code>N</code>管理器集群最多可以容忍管理器的丢失 <code>(N-1)/2</code>。</li><li>Docker 建议一个集群最多有七个管理器节点。</li></ul><h4 id="工作节点" tabindex="-1"><a class="header-anchor" href="#工作节点" aria-hidden="true">#</a> 工作节点</h4><p>工作节点也是 Docker 引擎的实例，其唯一目的是执行容器。Worker 节点不参与 Raft 分布式状态，不做出调度决策，也不为 swarm 模式 HTTP API 提供服务。</p><p>您可以创建一个由一个管理器节点组成的集群，但是如果没有至少一个管理器节点，您就不能拥有一个工作节点。默认情况下，所有经理也是工人。在单个管理器节点集群中，您可以运行类似命令<code>docker service create</code>，调度程序将所有任务放在本地引擎上。</p><p>为防止调度程序将任务放置在多节点群中的管理器节点上，请将管理器节点的可用性设置为<code>Drain</code>。调度器在<code>Drain</code>mode 中优雅地停止节点上的任务并调度<code>Active</code>节点上的任务 。调度程序不会将新任务分配给具有<code>Drain</code> 可用性的节点。</p><h3 id="swarm集群搭建" tabindex="-1"><a class="header-anchor" href="#swarm集群搭建" aria-hidden="true">#</a> Swarm集群搭建</h3><h4 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h4><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>准备3个节点，通过vagrant新增加两个节点<br> 需要单独指定hostname：<code>config.vm.hostname=&quot;work01-node&quot;</code><br> 还有就是每个节点需要具备Docker环境</p><h4 id="集群环境搭建" tabindex="-1"><a class="header-anchor" href="#集群环境搭建" aria-hidden="true">#</a> 集群环境搭建</h4><ol><li>创建manager节点<br> 进入manager节点，manager node也可以作为worker node提供服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm init <span class="token parameter variable">-advertise</span> <span class="token number">192.168</span>.56.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>注意观察日志，拿到worker node加入manager node的信息</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token parameter variable">--token</span> SWMTKN-1-0a5ph4nehwdm9wzcmlbj2ckqqso38pkd238rprzwcoawabxtdq-arcpra6yzltedpafk3qyvv0y3 <span class="token number">192.168</span>.56.10:2377
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>进入两个Worker</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token parameter variable">--token</span> SWMTKN-1-0a5ph4nehwdm9wzcmlbj2ckqqso38pkd238rprzwcoawabxtdq-arcpra6yzltedpafk3qyvv0y3 <span class="token number">192.168</span>.56.10:2377
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>进入manager node 查看集群情况</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>node类型转换</li></ol><p>可以将worker提升成manager，从而保证manager的高可用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">node</span> promote worker01-node
<span class="token function">docker</span> <span class="token function">node</span> promote worker02-node

<span class="token comment">#降级可以用demote</span>
<span class="token function">docker</span> <span class="token function">node</span> demote worker01-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),C={href:"http://labs.play-with-docker.com/",target:"_blank",rel:"noopener noreferrer"},O=o('<h3 id="raft一致性协议" tabindex="-1"><a class="header-anchor" href="#raft一致性协议" aria-hidden="true">#</a> Raft一致性协议</h3><p>Raft一致性协议：保证manager节点半数存活集群环境可用</p><h4 id="一主两从" tabindex="-1"><a class="header-anchor" href="#一主两从" aria-hidden="true">#</a> 一主两从</h4><p>还是参考上面的案例直接操作</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们停掉manager节点，那么整个集群环境是不可用的</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们将一个work节点提升等级</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="二主一从" tabindex="-1"><a class="header-anchor" href="#二主一从" aria-hidden="true">#</a> 二主一从</h4><p>除了上面的<code>promote</code>提升到 主的案例以外，我们还可用重新来搭集群处理<br> 我们可以在init后直接在 manager节点执行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm join-token manager
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="三主0从" tabindex="-1"><a class="header-anchor" href="#三主0从" aria-hidden="true">#</a> 三主0从</h4><p>停止其中一个整个集群还是可用</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是停止掉两个后就不可用使用了</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h3><ol><li>创建一个tomcat的service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> my-tomcat tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>查看当前swarm的service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>查看service的启动日志</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> logs my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>查看service的详情</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> inspect my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>查看my-tomcat运行在哪个node上</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>日志</code></p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>ID                  NAME                IMAGE               NODE                
DESIRED STATE       CURRENT STATE           <span class="token level error important">ERROR</span>               PORTS
u6o4mz4tj396        my<span class="token operator">-</span>tomcat<span class="token punctuation">.</span>1         tomcat<span class="token operator">:</span>latest       worker01<span class="token operator">-</span>node       
Running             Running <span class="token number">3</span> minutes ago  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>水平扩展service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> scale my-tomcat<span class="token operator">=</span><span class="token number">3</span>  
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>  
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>日志</code>：可以发现，其他node上都运行了一个my-tomcat的service</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token punctuation">[</span>root<span class="token operator">@</span>manager<span class="token operator">-</span>node <span class="token operator">~</span><span class="token punctuation">]</span><span class="token operator">#</span> docker service ps my<span class="token operator">-</span>tomcat
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            <span class="token level error important">ERROR</span>               PORTS
u6o4mz4tj396        my<span class="token operator">-</span>tomcat<span class="token punctuation">.</span>1         tomcat<span class="token operator">:</span>latest       worker01<span class="token operator">-</span>node       Running             Running <span class="token number">8</span> minutes ago                        
v505wdu3fxqo        my<span class="token operator">-</span>tomcat<span class="token punctuation">.</span>2         tomcat<span class="token operator">:</span>latest       manager<span class="token operator">-</span>node        Running             Running <span class="token number">46</span> seconds ago                       
wpbsilp62sc0        my<span class="token operator">-</span>tomcat<span class="token punctuation">.</span>3         tomcat<span class="token operator">:</span>latest       worker02<span class="token operator">-</span>node       Running             Running <span class="token number">49</span> seconds ago  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时到worker01-node上：<code>docker ps</code>，可以发现container的name和service名称不一样，这点要知道</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>CONTAINER ID        IMAGE               COMMAND             CREATED             <span class="token level info keyword">STATUS</span>              PORTS               NAMES
bc4b9bb097b8        tomcat<span class="token operator">:</span>latest       <span class="token string">&quot;catalina.sh run&quot;</span>   <span class="token number">10</span> minutes ago      Up <span class="token number">10</span> minutes       <span class="token number">8080</span><span class="token operator">/</span>tcp            my<span class="token operator">-</span>tomcat<span class="token punctuation">.</span>1<span class="token punctuation">.</span>u6o4mz4tj3969a1p3mquagxok
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>如果某个node上的my-tomcat挂掉了，这时候会自动扩展</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>worker01-node<span class="token punctuation">]</span>  
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> containerid  
​  
<span class="token punctuation">[</span>manager-node<span class="token punctuation">]</span>  
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>  
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>删除service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> <span class="token function">rm</span> my-tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="overlay" tabindex="-1"><a class="header-anchor" href="#overlay" aria-hidden="true">#</a> overlay</h3><p>Overlay 在网络技术领域，指的是一种网络架构上叠加的虚拟化技术模式，其大体框架是对基础网络不进行大规模修改的条件下，实现应用在网络上的承载，并能与其它网络业务分离，并且以基于IP的基础网络技术为主。</p><p>VXLAN（Virtual eXtensible LAN）技术是当前最为主流的Overlay标准</p><figure><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="wordpress实战" tabindex="-1"><a class="header-anchor" href="#wordpress实战" aria-hidden="true">#</a> WordPress实战</h3><ol><li>创建MySQL service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,source<span class="token operator">=</span>v1,destination<span class="token operator">=</span>/var/lib/mysql <span class="token parameter variable">--env</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>examplepass <span class="token parameter variable">--env</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>db_wordpress <span class="token parameter variable">--network</span> my-overlay-net mysql:5.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建WordPress的Service</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> wordpress <span class="token parameter variable">--env</span> <span class="token assign-left variable">WORDPRESS_DB_USER</span><span class="token operator">=</span>root <span class="token parameter variable">--env</span> <span class="token assign-left variable">WORDPRESS_DB_PASSWORD</span><span class="token operator">=</span>examplepass <span class="token parameter variable">--env</span> <span class="token assign-left variable">WORDPRESS_DB_HOST</span><span class="token operator">=</span>mysql:3306 <span class="token parameter variable">--env</span> <span class="token assign-left variable">WORDPRESS_DB_NAME</span><span class="token operator">=</span>db_wordpress <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">--network</span> my-overlay-net wordpress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>访问测试</li></ol><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>查看my-overlay-net</li></ol><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',56);function q(P,I){const s=r("ExternalLinkIcon");return t(),c("div",null,[S,R,a("p",null,[e("官网地址："),a("a",N,[e("https://docs.docker.com/engine/swarm/"),n(s)])]),D,a("ul",null,[E,T,a("li",null,[e("服务群模式"),a("a",A,[e("HTTP API 端点"),n(s)])])]),z,a("p",null,[e("在线Swarm演示："),a("a",C,[e("http://labs.play-with-docker.com"),n(s)]),e(" 通过Dock Hub 的账号密码登录即可，有效会话4个小时")]),O])}const j=i(y,[["render",q],["__file","Swarm.html.vue"]]);export{j as default};

import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as t,c as o,d as e,b as h,w as E,f as r,e as a}from"./app-5f4e7946.js";const c={},s=r('<h2 id="创建型模式-5种" tabindex="-1"><a class="header-anchor" href="#创建型模式-5种" aria-hidden="true">#</a> 创建型模式(5种)</h2><p>创建型模式主要解决<strong>对象的创建问题</strong>,封装复杂的创建过程,解耦对象的创建代码和使用代码.</p><h3 id="常用模式" tabindex="-1"><a class="header-anchor" href="#常用模式" aria-hidden="true">#</a> 常用模式</h3><h4 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h4><blockquote><p>单例模式用来创建全局唯一对象</p></blockquote>',5),A=e("h4",{id:"工厂模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#工厂模式","aria-hidden":"true"},"#"),a(" 工厂模式")],-1),B=e("blockquote",null,[e("p",null,"工厂模式用来创建不同但是相关类型的对象(继承同一父类或者接口的一组子类),由给定的参数来决定创建哪种类型的对象.")],-1),_=e("p",null,"包含 : 简单工厂模式 / 工厂方法模式 / 抽象工厂模式",-1),l=e("h4",{id:"建造者模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#建造者模式","aria-hidden":"true"},"#"),a(" 建造者模式")],-1),u=e("blockquote",null,[e("p",null,"建造者模式是用来创建复杂对象,可以通过设置不同的可选参数,定制化地创建不同的对象.")],-1),f=e("h3",{id:"不常用模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#不常用模式","aria-hidden":"true"},"#"),a(" 不常用模式")],-1),C=e("h4",{id:"原型模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原型模式","aria-hidden":"true"},"#"),a(" 原型模式")],-1),b=e("blockquote",null,[e("p",null,"原型模式针对创建成本比较大的对象,利用对已有对象进行复制的方式进行创建,以达到节省创建时间的目的.")],-1),x=r('<h2 id="结构型模式-7种" tabindex="-1"><a class="header-anchor" href="#结构型模式-7种" aria-hidden="true">#</a> 结构型模式(7种)</h2><p>一共包括七种：代理模式、桥接模式、装饰者模式、适配器模式、门面(外观)模式、组合模式、和享元模式。</p><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h3><h3 id="桥接模式" tabindex="-1"><a class="header-anchor" href="#桥接模式" aria-hidden="true">#</a> 桥接模式</h3><h3 id="装饰者模式" tabindex="-1"><a class="header-anchor" href="#装饰者模式" aria-hidden="true">#</a> 装饰者模式</h3><h3 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式" aria-hidden="true">#</a> 适配器模式</h3><h3 id="门面-外观-模式" tabindex="-1"><a class="header-anchor" href="#门面-外观-模式" aria-hidden="true">#</a> 门面(外观)模式</h3><h3 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式" aria-hidden="true">#</a> 组合模式</h3><h3 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式" aria-hidden="true">#</a> 享元模式</h3><h2 id="行为模式-11种" tabindex="-1"><a class="header-anchor" href="#行为模式-11种" aria-hidden="true">#</a> 行为模式(11种)</h2><p><strong>行为型模式用于描述程序在运行时复杂的流程控制</strong>，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为<strong>类行为模式</strong>和<strong>对象行为模式</strong>，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p><p>类行为模式 : <code>模板方法模式</code> / <code>解释器模式</code></p><p>对象行为模式 : <code>观察者模式</code> / <code>策略模式</code> / <code>职责链模式</code> / <code>状态模式</code> / <code>命令模式</code> / <code>中介者模式</code> / <code>迭代器模式</code> / <code>访问者模式</code> / <code>备忘录模式</code></p><h3 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式" aria-hidden="true">#</a> 模板方法模式</h3><h3 id="解释器模式" tabindex="-1"><a class="header-anchor" href="#解释器模式" aria-hidden="true">#</a> 解释器模式</h3><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h3><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式" aria-hidden="true">#</a> 策略模式</h3><h3 id="职责链模式" tabindex="-1"><a class="header-anchor" href="#职责链模式" aria-hidden="true">#</a> 职责链模式</h3><h3 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式" aria-hidden="true">#</a> 状态模式</h3><h3 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式" aria-hidden="true">#</a> 命令模式</h3><h3 id="中介者模式" tabindex="-1"><a class="header-anchor" href="#中介者模式" aria-hidden="true">#</a> 中介者模式</h3><h3 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式" aria-hidden="true">#</a> 迭代器模式</h3><h3 id="访问者模式" tabindex="-1"><a class="header-anchor" href="#访问者模式" aria-hidden="true">#</a> 访问者模式</h3><h3 id="备忘录模式" tabindex="-1"><a class="header-anchor" href="#备忘录模式" aria-hidden="true">#</a> 备忘录模式</h3>',25);function p(F,m){const d=n("RouterLink");return t(),o("div",null,[s,e("p",null,[h(d,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/01_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:E(()=>[a("01_单例模式")]),_:1})]),A,B,_,e("p",null,[h(d,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/02_%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:E(()=>[a("02_工厂模式")]),_:1})]),l,u,e("p",null,[h(d,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/03_%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:E(()=>[a("03_建造者模式")]),_:1})]),f,C,b,e("p",null,[h(d,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/04_%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:E(()=>[a("04_原型模式")]),_:1})]),x])}const g=i(c,[["render",p],["__file","二十三种设计模式.html.vue"]]);export{g as default};

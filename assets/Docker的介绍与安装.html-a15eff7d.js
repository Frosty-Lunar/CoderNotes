import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as l,d as e,e as a,b as s,f as o}from"./app-5f4e7946.js";const c="/CoderNotes/assets/image-20230824135929277-8d7ae60b.png",d="/CoderNotes/assets/image-20230824140142359-e1fa5039.png",p="/CoderNotes/assets/image-20230824140456684-9901a923.png",u="/CoderNotes/assets/image-20230824140750065-f8896a88.png",g="/CoderNotes/assets/image-20230824142337542-e39e682a.png",h="/CoderNotes/assets/image-20230824150206973-af67a51e.png",m="/CoderNotes/assets/image-20230824150723484-77772197.png",b="/CoderNotes/assets/image-20230824151123801-6fb115f9.png",_="/CoderNotes/assets/image-20230824151224438-0e213079.png",k="/CoderNotes/assets/image-20230824151355716-c7d5b74b.png",f="/CoderNotes/assets/image-20230824150907263-24b0d307.png",v="/CoderNotes/assets/image-20230824144900323-c4b1dcc4.png",x="/CoderNotes/assets/image-20230824145018196-0cab436f.png",y="/CoderNotes/assets/image-20230824145053546-1cad3a81.png",C="/CoderNotes/assets/image-20230824145216529-c9369793.png",D="/CoderNotes/assets/image-20230824145237613-4a97473d.png",N="/CoderNotes/assets/image-20230824153114766-1b6fb2ab.png",z="/CoderNotes/assets/architecture-b8a47667.svg",V="/CoderNotes/assets/image-20230824160531394-8061d4bb.png",w="/CoderNotes/assets/image-20230824160706381-9a391080.png",S="/CoderNotes/assets/image-20230824160816158-2083a2d0.png",L={},O=o('<h2 id="docker的介绍与安装" tabindex="-1"><a class="header-anchor" href="#docker的介绍与安装" aria-hidden="true">#</a> Docker的介绍与安装</h2><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="什么是docker" tabindex="-1"><a class="header-anchor" href="#什么是docker" aria-hidden="true">#</a> 什么是Docker？</h3><p>Docker是基于<code>Go</code>语言实现的开源项目。<br> Docker的主要目标是<code>Build，Ship and Run Any App,Anywhere</code>，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到一次封装，到处运行。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p><blockquote><p>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p></blockquote><h3 id="docker能干什么" tabindex="-1"><a class="header-anchor" href="#docker能干什么" aria-hidden="true">#</a> Docker能干什么？</h3><h4 id="以前的虚拟化技术" tabindex="-1"><a class="header-anchor" href="#以前的虚拟化技术" aria-hidden="true">#</a> 以前的虚拟化技术</h4><p>虚拟机（<code>virtual machine</code>）就是带环境安装的一种解决方案。<br> 它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使<strong>应用程序，操作系统和硬件</strong>三者之间的逻辑不变。<br><img src="'+p+'" alt="" loading="lazy"></p><p>虚拟机的缺点：</p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li><li>每个App都依赖于公共的Libraries，容易造成冲突。</li></ol><h4 id="容器虚拟化技术" tabindex="-1"><a class="header-anchor" href="#容器虚拟化技术" aria-hidden="true">#</a> 容器虚拟化技术</h4><p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br> Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。<br><img src="'+u+'" alt="" loading="lazy"><br><strong>Docker 和传统虚拟化方式的不同之处：</strong></p><ol><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>而容器内的应用进程直接运行于宿主机的内核，容器内没有自己的内核，而且也没有进行硬件虚拟，因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ol><h4 id="实际的运行" tabindex="-1"><a class="header-anchor" href="#实际的运行" aria-hidden="true">#</a> 实际的运行</h4><p>Docker作为开发人员需要掌握，作为<code>运维人员</code>必须掌握, 一次构建，随处运行。</p><ol><li>更快速的应用交付和部署</li><li>更便捷的升级和扩缩容</li><li>更简单的系统运维</li><li>更高效的计算资源利用</li></ol><h3 id="相关资源" tabindex="-1"><a class="header-anchor" href="#相关资源" aria-hidden="true">#</a> 相关资源</h3>',19),q={href:"http://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},B=e("br",null,null,-1),E={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},A=o('<h3 id="docker的安装" tabindex="-1"><a class="header-anchor" href="#docker的安装" aria-hidden="true">#</a> Docker的安装</h3><h4 id="docker安装的前提环境" tabindex="-1"><a class="header-anchor" href="#docker安装的前提环境" aria-hidden="true">#</a> Docker安装的前提环境</h4><ul><li>Docker支持以下的CentOS版本： <ul><li><strong>CentOS 7 (64-bit) 8</strong></li><li><strong>CentOS 6.5 (64-bit) 或更高的版本</strong></li></ul></li><li>前提条件： <ul><li>目前，CentOS 仅发行版本中的内核支持 Docker。 Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</li><li>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</li><li>查看自己的内核 <ul><li>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</li></ul></li></ul></li></ul><p>你可以使用如下命令查看当前系统的相关信息</p><ul><li>内核版本号：<code>uname -r</code></li><li>硬件版本号：<code>uname -m</code></li><li>主机名称：<code>hostname</code></li><li>操作系统类型：<code>uname -o</code></li></ul><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="vagrant虚拟机环境" tabindex="-1"><a class="header-anchor" href="#vagrant虚拟机环境" aria-hidden="true">#</a> Vagrant虚拟机环境</h4>',7),I={href:"https://www.virtualbox.org/",target:"_blank",rel:"noopener noreferrer"},P=e("br",null,null,-1),R={href:"https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"},F=e("br",null,null,-1),H={href:"https://app.vagrantup.com/boxes/search",target:"_blank",rel:"noopener noreferrer"},W=o('<p>安装VirtualBox和Vagrant，傻瓜式安装。安装完成后需要重启计算机。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在cmd命令窗口输入<code>vagrant</code> 命令弹出如下内容表示 <code>vagrant</code> 安装成功。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过Vagrant安装虚拟机：</p><ul><li>创建一个空的目录，cmd切换到该目录中，然后执行<code>vagrant init centos/7</code> 会创建<code>Vagrantfile</code>文件。<br><img src="'+b+'" alt="" loading="lazy"><img src="'+_+'" alt="" loading="lazy"></li><li>执行<code>vagrant up</code> 第一次执行的时候会远程下相关的镜像文件，并启动虚拟机。<br><img src="'+k+'" alt="" loading="lazy"></li><li>连接虚拟机通过<code>vagrant ssh</code> 连接，默认的账号密码是： <code>vagrant vagrant</code></li></ul><p>通过Vagrant仓库下载虚拟机配置文件：<br><img src="'+f+'" alt="" loading="lazy"></p><h4 id="网络配置" tabindex="-1"><a class="header-anchor" href="#网络配置" aria-hidden="true">#</a> 网络配置</h4><p>配置文件名称：<code>Vagrantfile</code><br><img src="'+v+'" alt="" loading="lazy"></p><p>查看当前主机给虚拟机分配的网关网段：</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以修改后的IP为：<code>192.168.56.10</code></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重启测试，使用<strong>XShell</strong>远程连接工具测试连接：采用<strong>SSH</strong>连接，需要使用私钥。<br><img src="'+C+'" alt="" loading="lazy"></p><p>私钥地址：<br><img src="'+D+'" alt="" loading="lazy"></p><h4 id="docker的安装-1" tabindex="-1"><a class="header-anchor" href="#docker的安装-1" aria-hidden="true">#</a> Docker的安装</h4>',16),X={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},j=o(`<ol><li>卸载原有的环境<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
              docker-client <span class="token punctuation">\\</span>
              docker-client-latest <span class="token punctuation">\\</span>
              docker-common <span class="token punctuation">\\</span>
              docker-latest <span class="token punctuation">\\</span>
              docker-latest-logrotate <span class="token punctuation">\\</span>
              docker-logrotate <span class="token punctuation">\\</span>
              docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>安装对应的依赖和镜像地址<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>安装Docker CE<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>启动Docker<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>测试是否安装成功：查看Docker安装版本<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装成功！</p><blockquote><p>补充：当我们下载docker镜像的时候，网路过慢，可切换国内镜像源，加快下载速度。<br> 配置阿里云镜像源：<code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code><br> yum更新：<code>yum makecache fast</code><br> 开机启动docker：<code>sudo systemctl enable docker</code></p></blockquote><h3 id="docker的基本组成" tabindex="-1"><a class="header-anchor" href="#docker的基本组成" aria-hidden="true">#</a> docker的基本组成</h3><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="镜像-image" tabindex="-1"><a class="header-anchor" href="#镜像-image" aria-hidden="true">#</a> 镜像(Image)</h4><p>Docker镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p><table><thead><tr><th style="text-align:left;"><strong>Docker</strong></th><th style="text-align:left;"><strong>面向对象</strong></th></tr></thead><tbody><tr><td style="text-align:left;">容器</td><td style="text-align:left;">对象</td></tr><tr><td style="text-align:left;">镜像</td><td style="text-align:left;">类</td></tr></tbody></table><h4 id="容器-container" tabindex="-1"><a class="header-anchor" href="#容器-container" aria-hidden="true">#</a> 容器(Container)</h4><p>Docker 利用容器（Container）独立运行的一个或一组应用，容器是用镜像创建的运行实例。它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><h4 id="仓库-repository" tabindex="-1"><a class="header-anchor" href="#仓库-repository" aria-hidden="true">#</a> 仓库(Repository)</h4>',12),G=e("br",null,null,-1),T=e("br",null,null,-1),J=e("br",null,null,-1),K={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},M=e("h4",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1),Q=e("p",null,[a("镜像文件生成的容器实例，本身也是一个文件，称为镜像文件。"),e("br"),a(" 一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器   。"),e("br"),a(" 至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。")],-1),U=e("h3",{id:"阿里云镜像加速",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#阿里云镜像加速","aria-hidden":"true"},"#"),a(" 阿里云镜像加速")],-1),Y=e("br",null,null,-1),Z={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"},$=e("strong",null,"搜索容器镜像服务",-1),ee=e("strong",null,"镜像加速器",-1),ae=e("br",null,null,-1),ne=e("img",{src:V,alt:"",loading:"lazy"},null,-1),se=e("br",null,null,-1),oe=e("img",{src:w,alt:"",loading:"lazy"},null,-1),te=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39; 
{
	&quot;registry-mirrors&quot;: [&quot;https://leyb05gt.mirror.aliyuncs.com&quot;] 
}
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',2);function ie(re,le){const n=i("ExternalLinkIcon");return r(),l("div",null,[O,e("p",null,[e("a",q,[a("Docker官网"),s(n)]),B,e("a",E,[a("Docker仓库"),s(n)])]),A,e("p",null,[e("a",I,[a("VirtualBox官网"),s(n)]),P,e("a",R,[a("Vagrant官网"),s(n)]),F,e("a",H,[a("Vagrant镜像仓库"),s(n)])]),W,e("p",null,[e("a",X,[a("官方文档"),s(n)])]),j,e("p",null,[a("仓库（Repository）是集中存放镜像文件的场所。"),G,a(" 仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。   "),T,a(" 仓库分为公开仓库（Public）和私有仓库（Private）两种形式。"),J,a(" 最大的公开仓库是 "),e("a",K,[a("Docker Hub"),s(n)]),a("，存放了数量庞大的镜像供用户下载，国内的公开仓库包括阿里云 、网易云等。")]),M,Q,U,e("p",null,[a("默认访问的仓库是在国外，所以访问速度是没法保证的。为了更好的体验，我们可以配置阿里云的镜像加速。"),Y,e("a",Z,[a("阿里云容器镜像服务"),s(n)]),a("：进入阿里云首页后，直接"),$,a("，进入"),ee,a("。然后根据操作文档，配置阿里云镜像加速。"),ae,ne,se,oe]),te])}const pe=t(L,[["render",ie],["__file","Docker的介绍与安装.html.vue"]]);export{pe as default};

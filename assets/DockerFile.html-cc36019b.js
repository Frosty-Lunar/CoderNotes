import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,f as e}from"./app-5f4e7946.js";const t="/CoderNotes/assets/image-20230825141433543-70be76bc.png",i="/CoderNotes/assets/image-20230825141659210-603acaa8.png",o="/CoderNotes/assets/image-20230825141919541-0645ca7a.png",l="/CoderNotes/assets/image-20230825144630163-9629aaef.png",c="/CoderNotes/assets/image-20230825152135202-aeb3a3f0.png",p="/CoderNotes/assets/image-20230825152205810-77b0fd46.png",r="/CoderNotes/assets/image-20230825152250192-33554354.png",d="/CoderNotes/assets/image-20230825152343709-400f6987.png",u="/CoderNotes/assets/image-20230825154741183-54391c8a.png",m="/CoderNotes/assets/image-20230825154936431-17a75b8f.png",v="/CoderNotes/assets/image-20230825155103500-4b152e25.png",k="/CoderNotes/assets/image-20230825163116540-2bf07df5.png",b="/CoderNotes/assets/image-20230825163218306-ccaf47eb.png",g="/CoderNotes/assets/image-20230825163314066-64578a30.png",h="/CoderNotes/assets/image-20230825164057778-9613d0fa.png",f="/CoderNotes/assets/image-20230825165303149-6b7306e2.png",q="/CoderNotes/assets/image-20230825170632580-50bc8cf3.png",D="/CoderNotes/assets/image-20230825172006048-b1d93a78.png",x="/CoderNotes/assets/image-20230825172142056-b0802453.png",_="/CoderNotes/assets/image-20230825172908436-36678174.png",N="/CoderNotes/assets/image-20230825173307237-02f434ef.png",T="/CoderNotes/assets/image-20230825173420318-2a623f80.png",A={},C=e('<h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> DockerFile</h2><p>DockerFile是用来构建Docker镜像的<code>构建文件</code>，是由一系列<code>命令</code>和<code>参数</code>构成的<code>脚本</code>。</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM scratch
ADD centos-7-x86_64-docker.tar.xz /

LABEL <span class="token punctuation">\\</span>
    org.label-schema.schema-version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.name<span class="token operator">=</span><span class="token string">&quot;CentOS Base Image&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.vendor<span class="token operator">=</span><span class="token string">&quot;CentOS&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.license<span class="token operator">=</span><span class="token string">&quot;GPLv2&quot;</span> <span class="token punctuation">\\</span>
    org.label-schema.build-date<span class="token operator">=</span><span class="token string">&quot;20201113&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.title</span><span class="token operator">=</span><span class="token string">&quot;CentOS Base Image&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.vendor</span><span class="token operator">=</span><span class="token string">&quot;CentOS&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.licenses</span><span class="token operator">=</span><span class="token string">&quot;GPL-2.0-only&quot;</span> <span class="token punctuation">\\</span>
    <span class="token assign-left variable">org.opencontainers.image.created</span><span class="token operator">=</span><span class="token string">&quot;2020-11-13 00:00:00+00:00&quot;</span>

CMD <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dockerfile介绍" tabindex="-1"><a class="header-anchor" href="#dockerfile介绍" aria-hidden="true">#</a> Dockerfile介绍</h3><h4 id="构建过程" tabindex="-1"><a class="header-anchor" href="#构建过程" aria-hidden="true">#</a> 构建过程</h4><p>Dockerfile中的指令需要满足如下的规则：<br><img src="`+i+'" alt="" loading="lazy"></p><h4 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h4><p>docker执行一个Dockerfile脚本的流程大致如下：</p><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器作出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新的容器</li><li>执行Dockerfile中的下一条指令直到所有指令都执行完成</li></ol><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><ul><li>Dockerfile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件的运行态。</li></ul><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，当前新镜像是基于哪个镜像的，有继承的意味</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>容器构建时需要运行的命令</td></tr><tr><td>EXPOSE</td><td>当前容器对外暴露的端口</td></tr><tr><td>WORKDIR</td><td>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</td></tr><tr><td>ENV</td><td>用来在构建镜像过程中设置环境变量</td></tr><tr><td>ADD</td><td>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</td></tr><tr><td>COPY</td><td>类似ADD，拷贝文件和目录到镜像中。 将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置 COPY src dest COPY [&quot;src&quot;,&quot;dest&quot;]</td></tr><tr><td>VOLUME</td><td>容器数据卷，用于数据保存和持久化工作</td></tr><tr><td>CMD</td><td>指定一个容器启动时要运行的命令 Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</td></tr><tr><td>ENTRYPOINT</td><td>指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</td></tr><tr><td>ONBUILD</td><td>当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RUN <span class="token builtin class-name">set</span> -eux<span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>catalina.sh configtest <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;Apache Tomcat Native&#39;</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;INFO: Loaded( APR based)? Apache Tomcat Native library&#39;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token punctuation">\\</span>
		<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
		<span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token keyword">fi</span>

EXPOSE <span class="token number">8080</span>
CMD <span class="token punctuation">[</span><span class="token string">&quot;catalina.sh&quot;</span>, <span class="token string">&quot;run&quot;</span><span class="token punctuation">]</span>

<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">7777</span>:8080 tomcat  <span class="token function">ls</span> <span class="token parameter variable">-l</span>

RUN <span class="token builtin class-name">set</span> -eux<span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>catalina.sh configtest <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;Apache Tomcat Native&#39;</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token assign-left variable">nativeLines</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;INFO: Loaded( APR based)? Apache Tomcat Native library&#39;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token punctuation">\\</span>
		<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token string">&quot;<span class="token variable">$nativeLines</span>&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
		<span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
	<span class="token keyword">fi</span>

EXPOSE <span class="token number">8080</span>
CMD <span class="token punctuation">[</span><span class="token string">&quot;catalina.sh&quot;</span>, <span class="token string">&quot;run&quot;</span><span class="token punctuation">]</span>
CMD <span class="token function">ls</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dockerfile命令：</p><table><thead><tr><th><strong>BUILD</strong></th><th><strong>BOTH</strong></th><th><strong>RUN</strong></th></tr></thead><tbody><tr><td>FROM</td><td>WORKDIR</td><td>CMD</td></tr><tr><td>MAINTAINER</td><td>USER</td><td>ENV</td></tr><tr><td>COPY</td><td></td><td>EXPOSE</td></tr><tr><td>ADD</td><td></td><td>VOLUME</td></tr><tr><td>RUN</td><td></td><td>ENTRYPOINT</td></tr><tr><td>ONBUILD</td><td></td><td></td></tr><tr><td>.dockerignore</td><td></td><td></td></tr></tbody></table><h3 id="dockerfile案例" tabindex="-1"><a class="header-anchor" href="#dockerfile案例" aria-hidden="true">#</a> Dockerfile案例</h3><h4 id="base镜像" tabindex="-1"><a class="header-anchor" href="#base镜像" aria-hidden="true">#</a> Base镜像</h4><p>Docker Hub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的，如下<br><img src="`+l+`" alt="" loading="lazy"></p><p><code>scratch</code>相对于java中的<code>Object</code></p><h4 id="自定义镜像" tabindex="-1"><a class="header-anchor" href="#自定义镜像" aria-hidden="true">#</a> 自定义镜像</h4><p>我们从官方pull下来的<code>centos</code>镜像是mini版的，所以不带有<code>vim</code>这些基础命令，那我们就来自定义一个镜像，功能比官方下载的强大点，同时运用下各个指令。</p><h5 id="编写" tabindex="-1"><a class="header-anchor" href="#编写" aria-hidden="true">#</a> 编写</h5><p>首先我们来编写对应的Dockerfile文件。内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos

MAINTAINER frostylunar<span class="token operator">&lt;</span><span class="token number">201628142</span>@qq.com<span class="token operator">&gt;</span>

ENV MYPATH /usr/local

WORKDIR <span class="token variable">$MYPATH</span>

RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>

EXPOSE <span class="token number">80</span>

CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>

CMD <span class="token builtin class-name">echo</span> <span class="token string">&quot;success_______________ok&quot;</span>

CMD /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="构建" tabindex="-1"><a class="header-anchor" href="#构建" aria-hidden="true">#</a> 构建</h5><p>将脚本构建成对应的镜像文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile名称 <span class="token parameter variable">-t</span> 新建的镜像名:TAG <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看镜像</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h5><p>运行镜像文件。<br><code>docker run -it 新镜像名称:TAG</code><br><img src="'+r+`" alt="" loading="lazy"></p><p>运行容器后，落脚点是 <code>/usr/local</code> 因为我们配置了<code>WORKDIR</code></p><h5 id="镜像历史" tabindex="-1"><a class="header-anchor" href="#镜像历史" aria-hidden="true">#</a> 镜像历史</h5><p>查看一个镜像文件的变更历史可以使用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">history</span> 镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在本例中我们用到了 <code>FROM</code> <code>MAINTAINER</code> <code>RUN</code> <code>EXPOSE</code> <code>ENV</code> <code>WORKDIR</code> 命令</p><h4 id="cmd-entrypoint案例" tabindex="-1"><a class="header-anchor" href="#cmd-entrypoint案例" aria-hidden="true">#</a> CMD/ENTRYPOINT案例</h4><p>接下来我们通过案例来看看<code>CMD</code>和<code>ENTRYPOINT</code>两个命令的区别，这两个命令的作用都是<code>指定一个容器启动时要运行的命令</code></p><h5 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h5><p>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换掉，我们通过tomcat的案例来介绍。 正常情况如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是当我们在执行命令后添加参数的话，如下所示：<br><img src="'+m+'" alt="" loading="lazy"></p><p>原因是我们查看Tomcat对应的Dockfile文件。<br><img src="'+v+`" alt="" loading="lazy"><br> 然而我们的run命令，把Dockerfile中的最后的CMD命令覆盖了~~</p><h5 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint" aria-hidden="true">#</a> ENTRYPOINT</h5><p>有别于<code>CMD</code>命令，<code>ENTRYPOINT</code>命令是在 <code>docker run</code> 之后的参数会被当做参数传递给 <code>ENTRYPOINT</code>，之后形成新的组合命令。我们通过<code>curl</code>指令来介绍这个案例。 Dockerfile文件如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos:7
RUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span>
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">&quot;curl&quot;</span>, <span class="token string">&quot;-s&quot;</span>, <span class="token string">&quot;http://www.baidu.com&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> tomcat:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="" loading="lazy"><br> 运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> tomcat:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加参数<code>-i</code> 查看响应报文头<br><img src="'+g+'" alt="" loading="lazy"></p><p>通过这个例子 可以看到<code>ENTRYPOINT</code>不会覆盖，而是组合成了一个新的命令。</p><h4 id="自定义tomcat" tabindex="-1"><a class="header-anchor" href="#自定义tomcat" aria-hidden="true">#</a> 自定义Tomcat</h4><p>自定义一个<code>tomcat</code>镜像来介绍下<code>ADD</code>和<code>COPY</code>这两个命令的区别。</p><h5 id="添加一个文件" tabindex="-1"><a class="header-anchor" href="#添加一个文件" aria-hidden="true">#</a> 添加一个文件</h5><p>在tomcat目录下新建<code>hello.txt</code>文件，作用是测试<code>COPY</code>命令。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="拷贝相关软件" tabindex="-1"><a class="header-anchor" href="#拷贝相关软件" aria-hidden="true">#</a> 拷贝相关软件</h5><p>准备对应JDK和Tomcat的压缩文件。</p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="创建dockerfile文件" tabindex="-1"><a class="header-anchor" href="#创建dockerfile文件" aria-hidden="true">#</a> 创建Dockerfile文件</h5><p>Dockerfile文件内容如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM  centos:7
MAINTAINER   frostylunar<span class="token operator">&lt;</span><span class="token number">201628142</span>@qq.com<span class="token operator">&gt;</span>
<span class="token comment">#把宿主机当前上下文的hello.txt拷贝到容器/usr/local/路径下</span>
COPY hello.txt /usr/local/helloincontainer.txt
<span class="token comment">#安装vim编辑器</span>
RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
<span class="token comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span>
ENV MYPATH /usr/local
WORKDIR <span class="token variable">$MYPATH</span>
<span class="token comment">#把jdk 与 tomcat 添加到容器中</span>
ADD jdk-8u381-linux-x64.tar.gz <span class="token variable">$MYPATH</span>
ADD apache-tomcat-8.5.92.tar.gz <span class="token variable">$MYPATH</span>
<span class="token comment">#配置jdk与 tomcat 环境变量</span>
ENV JAVA_HOME <span class="token variable">$MYPATH</span>/jdk1.8.0_381
ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
ENV CATALINA_HOME <span class="token variable">$MYPATH</span>/apache-tomcat-8.5.92
ENV CATALINA_BASE <span class="token variable">$MYPATH</span>/apache-tomcat-8.5.92
ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/bin
<span class="token comment">#容器运行时监听的端口</span>
EXPOSE  <span class="token number">8080</span>
<span class="token comment">#启动时运行tomcat</span>
CMD <span class="token variable">$MYPATH</span>/apache-tomcat-8.5.92/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> <span class="token parameter variable">-F</span> <span class="token variable">$MYPATH</span>/apache-tomcat-8.5.92/bin/logs/catalina.out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="构建-1" tabindex="-1"><a class="header-anchor" href="#构建-1" aria-hidden="true">#</a> 构建</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> frostylunar/tomcat:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>构建成功！</p><h5 id="运行-1" tabindex="-1"><a class="header-anchor" href="#运行-1" aria-hidden="true">#</a> 运行</h5><p>构建成功后，就可以开始运行了，运行命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">9080</span>:8080 <span class="token parameter variable">--name</span> frostylunar-tomcat <span class="token parameter variable">-v</span> /root/dockerfile/tomcat/test:/usr/local/apache-tomcat-8.5.92/webapps/test <span class="token parameter variable">-v</span> /root/dockerfile/tomcat/tomcatlogs/:/usr/local/apache-tomcat-8.5.92/logs <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true frostylunar/tomcat:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h5><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="部署web项目" tabindex="-1"><a class="header-anchor" href="#部署web项目" aria-hidden="true">#</a> 部署Web项目</h5><p>既然我们已经部署好了我们自己的Tomcat容器，而且也设置了对应的数据卷，那么我们来实际部署一个web案例来看看。</p><h6 id="web-xml文件" tabindex="-1"><a class="header-anchor" href="#web-xml文件" aria-hidden="true">#</a> web.xml文件</h6><p>在Tomcat的test目录下创建<code>WEB-INF目录</code>，然后创建<code>web.xml</code>文件。</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>WebApp_ID<span class="token punctuation">&quot;</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2.5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="创建jsp文件" tabindex="-1"><a class="header-anchor" href="#创建jsp文件" aria-hidden="true">#</a> 创建jsp文件</h6><p>然后创建一个简单的JSP页面即可。</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;title&gt;Insert title here&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    -----------welcome------------
    &lt;%=&quot;i am in docker tomcat self &quot;%&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;% System.out.println(&quot;=============docker tomcat self&quot;);%&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="重启容器" tabindex="-1"><a class="header-anchor" href="#重启容器" aria-hidden="true">#</a> 重启容器</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token function">docker</span> restart bed4693e7412
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重启成功，重新访问页面：<code>http://192.168.232.188:9080/test/</code></p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',95),y=[C];function E(O,M){return s(),n("div",null,y)}const I=a(A,[["render",E],["__file","DockerFile.html.vue"]]);export{I as default};
